---
  - name: "generate password if not set explictly"
    set_fact:
      postgresql_password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') }}"
    when: postgresql_password is not defined

  - name: "provision PostgreSQL"
    include_tasks: postgresql.yml
    vars:
      STORAGE_CLASS_NAME: "{{ storage_class_name }}"
      CEPH_PV_SECRET: "{{ ceph_pv_secret }}"
      CEPH_PV_SECRET_NAME: "{{ ceph_pv_secret_name }}"
      MEMORY_LIMIT: "{{ postgresql_memory_limit}}"
      NAMESPACE: "{{ namespace }}"
      POSTGRESQL_BASE_IMAGE_NAMESPACE: openshift
      DATABASE_SERVICE_NAME: "{{ postgresql_database_service_name }}"
      POSTGRESQL_USER: "{{ postgresql_user }}"
      POSTGRESQL_PASSWORD: "{{ postgresql_password }}"
      POSTGRESQL_DATABASE: "{{ postgresql_database }}"
      VOLUME_CAPACITY: "{{ postgresql_volume_capacity }}"
      POSTGRESQL_VERSION: "{{ postgresql_version }}"

  - name: "create route for Pgweb"
    k8s:
      state: present
      definition:
        kind: Route
        apiVersion: route.openshift.io/v1
        metadata:
          name: pgweb
          namespace: "{{ namespace }}"
          labels:
            app: thoth
            component: pgweb
        spec:
          to:
            kind: Service
            name: pgweb

  - name: "create Pgweb service"
    k8s:
      state: present
      definition:
        kind: Service
        apiVersion: v1
        metadata:
          labels:
            service: pgweb
            app: thoth
            component: pgweb
          name: pgweb
          namespace: "{{ namespace }}"
        spec:
          ports:
          - port: 80
            protocol: TCP
            targetPort: 8081
          selector:
            service: pgweb

  - name: "create deployment config for Pgweb"
    k8s:
      state: present
      definition:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        metadata:
          labels:
            service: pgweb
            app: thoth
            component: pgweb
          name: pgweb
          namespace: "{{ namespace }}"
        spec:
          replicas: 1
          selector:
            service: pgweb
          template:
            metadata:
              labels:
                service: pgweb
            spec:
              containers:
              - env:
                - name: DB_HOST
                  value: postgresql
                - name: DB_PORT
                  value: "5432"
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: postgresql
                      key: database-name
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: postgresql
                      key: database-user
                - name: DB_PASSWORD
                  secretKeyRef:
                    name: postgresql
                    key: database-password
                name: pgweb
                ports:
                  - containerPort: 8081
                    protocol: TCP
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "1"
                  limits:
                    memory: "512Mi"
                    cpu: "1"
                readinessProbe:
                  httpGet:
                    path: '/'
                    port: 8081
                    scheme: HTTP
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 10
                livenessProbe:
                  httpGet:
                    path: '/'
                    port: 8081
                    scheme: HTTP
                  initialDelaySeconds: 10
                  periodSeconds: 60
                  timeoutSeconds: 10
          test: false
          triggers:
          - type: ConfigChange
          - type: ImageChange
            imageChangeParams:
              automatic: true
              containerNames:
                - pgweb
              from:
                kind: ImageStreamTag
                name: 'pgweb:latest'

  - name: "create image stream for Pgweb"
    k8s:
      state: present
      definition:
        apiVersion: image.openshift.io/v1
        kind: ImageStream
        metadata:
          name: pgweb
          namespace: "{{ namespace }}"
          labels:
            app: thoth
            component: pgweb
        spec:
          lookupPolicy:
            local: false
          tags:
          - annotations: null
            from:
              kind: DockerImage
              name: sosedoff/pgweb:0.11.3
            name: latest

  - name: "create pgbouncer deployment"
    k8s:
      state: present
      definition:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        metadata:
          labels:
            service: pgbouncer
            app: thoth
            component: pgbouncer
          name: pgbouncer
          namespace: "{{ namespace }}"
        spec:
          replicas: 1
          selector:
            service: pgbouncer
          template:
            metadata:
              labels:
                service: pgbouncer
            spec:
              containers:
              - env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: postgresql
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: postgresql
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: postgresql
                - name: POSTGRES_SERVICE_HOST
                  value: postgresql
                name: pgbouncer
                image: pgbouncer
                livenessProbe:
                  failureThreshold: 3
                  initialDelaySeconds: 10
                  periodSeconds: 60
                  successThreshold: 1
                  tcpSocket:
                    port: 5432
                  timeoutSeconds: 10
                ports:
                - containerPort: 5432
                  protocol: TCP
                readinessProbe:
                  failureThreshold: 3
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  tcpSocket:
                    port: 5432
                  timeoutSeconds: 10
                resources:
                  limits:
                    cpu: 2
                    memory: 512Mi
                  requests:
                    cpu: 2
                    memory: 512Mi
          test: false
          triggers:
          - type: ConfigChange
          - type: ImageChange
            imageChangeParams:
              automatic: true
              containerNames:
                - pgbouncer
              from:
                kind: ImageStreamTag
                name: 'pgbouncer:latest'

  - name: "create pgbouncer service"
    k8s:
      state: present
      definition:
        kind: Service
        apiVersion: v1
        metadata:
          labels:
            service: pgbouncer
            app: thoth
            component: pgbouncer
          name: pgbouncer
          namespace: "{{ namespace }}"
        spec:
          ports:
          - port: 5432
            protocol: TCP
            targetPort: 5432
          selector:
            service: pgbouncer

  - name: "create image stream for pgbouncer"
    k8s:
      state: present
      definition:
        apiVersion: image.openshift.io/v1
        kind: ImageStream
        metadata:
          name: pgbouncer
          namespace: "{{ namespace }}"
          labels:
            app: thoth
            component: pgbouncer
        spec:
          lookupPolicy:
            local: false
          tags:
          - annotations: null
            from:
              kind: DockerImage
              name: quay.io/openshiftio/bayesian-coreapi-pgbouncer:latest
            name: latest

  - name: "show PostgreSQL password"
    debug: "msg=PostgreSQL password: '{{ postgresql_password }}'"
