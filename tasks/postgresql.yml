---
- name: "create secret for postgresql"
  k8s:
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        annotations:
          template.openshift.io/expose-database_name: "{.data['database-name']}"
          template.openshift.io/expose-password: "{.data['database-password']}"
          template.openshift.io/expose-username: "{.data['database-user']}"
        name: "{{ DATABASE_SERVICE_NAME }}"
        namespace: "{{ NAMESPACE }}"
        labels:
          app: thoth
          component: postgresql
      stringData:
        database-name: "{{ POSTGRESQL_DATABASE }}"
        database-password: "{{ POSTGRESQL_PASSWORD }}"
        database-user: "{{ POSTGRESQL_USER }}"

- name: "create service for postgresql"
  k8s:
    state: present
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        annotations:
          template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
        name: "{{ DATABASE_SERVICE_NAME }}"
        namespace: "{{ NAMESPACE }}"
        labels:
          app: thoth
          component: postgresql
      spec:
        ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
        selector:
          name: "{{ DATABASE_SERVICE_NAME }}"
        sessionAffinity: None
        type: ClusterIP
      status:
        loadBalancer: {}

- name: "create presistant volume claim for postgresql"
  k8s:
    state: present
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: "{{ DATABASE_SERVICE_NAME }}"
        namespace: "{{ NAMESPACE }}"
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "{{ VOLUME_CAPACITY }}"
        storageClassName: "{{ STORAGE_CLASS_NAME }}"

- name: "create secret for ceph based persistent volume"
  k8s:
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      type: kubernetes.io/rbd
      metadata:
        name: "{{ CEPH_PV_SECRET_NAME }}"
        namespace: "{{ NAMESPACE }}"
      data:
        key: "{{ CEPH_PV_SECRET }}"

- name: "create deployment for postgresql"
  k8s:
    state: present
    definition:
      kind: DeploymentConfig
      apiVersion: apps.openshift.io/v1
      metadata:
        annotations:
          template.alpha.openshift.io/wait-for-ready: 'true'
        name: "{{ DATABASE_SERVICE_NAME }}"
        namespace: "{{ NAMESPACE }}"
        labels:
          app: thoth
          component: postgresql
      spec:
        replicas: 1
        selector:
          name: "{{ DATABASE_SERVICE_NAME }}"
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              name: "{{ DATABASE_SERVICE_NAME }}"
          spec:
            containers:
            - capabilities: {}
              env:
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: "{{ DATABASE_SERVICE_NAME }}"
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: "{{ DATABASE_SERVICE_NAME }}"
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: "{{ DATABASE_SERVICE_NAME }}"
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                exec:
                  command:
                  - "/usr/libexec/check-container"
                  - "--live"
                initialDelaySeconds: 120
                timeoutSeconds: 10
              name: postgresql
              ports:
              - containerPort: 5432
                protocol: TCP
              readinessProbe:
                exec:
                  command:
                  - "/usr/libexec/check-container"
                initialDelaySeconds: 5
                timeoutSeconds: 1
              resources:
                limits:
                  memory: "${MEMORY_LIMIT}"
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: "/dev/termination-log"
              volumeMounts:
              - mountPath: "/var/lib/pgsql/data"
                name: "{{ DATABASE_SERVICE_NAME }}-data"
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            volumes:
            - name: "{{ DATABASE_SERVICE_NAME }}-data"
              persistentVolumeClaim:
                claimName: "{{ DATABASE_SERVICE_NAME }}"
        triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
            - postgresql
            from:
              kind: ImageStreamTag
              name: postgresql:"{{ POSTGRESQL_VERSION }}"
              namespace: "{{ POSTGRESQL_BASE_IMAGE_NAMESPACE }}"
            lastTriggeredImage: ''
          type: ImageChange
        - type: ConfigChange
      status: {}
